{"version":3,"sources":["StoryText/StoryText.js","Options/Options.js","App.js","serviceWorker.js","index.js"],"names":["StoryText","props","state","originalText","counter","setInterval","nextCounter","nextText","text","setState","id","this","slice","React","Component","Options","handleClick","bind","option","set","forEach","flag","onSetFlag","consumes","onRemoveFlag","next","onNext","random","sum","r","weight","rand","Math","console","log","some","flags","checkFlag","conditions","checkFlags","not","items","options","className","onClick","onContinue","index","shouldShow","push","key","App","node","findNode","continue","setNode","setFlag","removeFlag","nextNode","prev","data","find","checkConditions","condition","nextFlags","concat","copy","indexOf","splice","f","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3feeec51.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './StoryText.css'\r\n\r\nclass StoryText extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            originalText: \"\",\r\n            counter: 0\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            let nextCounter = this.state.counter + 1;\r\n            let nextText = this.state.originalText;\r\n            if(this.props.text !== this.state.originalText) {\r\n                nextText = this.props.text;\r\n                nextCounter = 0;\r\n            }\r\n            this.setState({\r\n                originalText: nextText,\r\n                counter: nextCounter\r\n            });\r\n        }, 10);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <span id=\"story-text\">\r\n                {this.state.originalText.slice(0, this.state.counter)}\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StoryText;","import React from 'react';\r\nimport styles from './Options.css'\r\n\r\nclass Options extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(option) {\r\n        if(option.set) {\r\n            option.set.forEach(flag => {\r\n                this.props.onSetFlag(flag);\r\n            });\r\n        }\r\n        if(option.consumes) {\r\n            option.consumes.forEach(flag => {\r\n                this.props.onRemoveFlag(flag);\r\n            })\r\n        }\r\n        if(option.next) {\r\n            this.props.onNext(option.next);\r\n        }\r\n        else if(option.random) {\r\n            let sum = 0;\r\n            option.random.forEach(r => {\r\n                sum += r.weight;\r\n            });\r\n            let rand = Math.random()*sum;\r\n            sum = 0;\r\n            console.log(rand);\r\n            option.random.some(r => {\r\n                sum += r.weight;\r\n                if(rand < sum) {\r\n                    this.props.onNext(r.next);\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n    }\r\n\r\n    checkFlags(flags) {\r\n        return !flags.some(flag => {\r\n            return !this.props.checkFlag(flag);\r\n        });\r\n    }\r\n\r\n    shouldShow(option) {\r\n        if(option.conditions) {\r\n            if(!this.checkFlags(option.conditions)) {\r\n                return false;\r\n            }\r\n        }\r\n        if(option.not) {\r\n            if(this.checkFlags(option.not)) {\r\n                return false;\r\n            }\r\n        }\r\n        if(option.consumes) {\r\n            if(!this.checkFlags(option.consumes)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        let items;\r\n        if(this.props.options == null) {\r\n            items = [\r\n                <span className=\"option\" onClick={this.props.onContinue}>Kontynuuj.</span>\r\n            ]\r\n        }\r\n        else {\r\n            items = [];\r\n            this.props.options.forEach((option, index) => {\r\n                if(this.shouldShow(option)) {\r\n                    items.push(\r\n                        <span key={index} className=\"option\" onClick={() => {this.handleClick(option)}}>{option.text}</span>\r\n                    )\r\n                }\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div id=\"options\">\r\n                {items}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Options;","import React from 'react';\nimport './App.css';\n\nimport StoryText from './StoryText/StoryText';\nimport Options from './Options/Options';\nimport data from './story.json';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      node: this.findNode(\"start\"),\n      flags: []\n    }\n\n    this.continue = this.continue.bind(this);\n    this.setNode = this.setNode.bind(this);\n    this.setFlag = this.setFlag.bind(this);\n    this.removeFlag = this.removeFlag.bind(this);\n    this.checkFlag = this.checkFlag.bind(this);\n  }\n\n  setNode(id) {\n    const nextNode = this.findNode(id);\n    if(nextNode.set) {\n      nextNode.set.forEach(flag => {\n        this.setFlag(flag);\n      })\n    }\n    this.setState(prev => {\n      prev.node = nextNode;\n      if(id === \"start\") {\n        prev.flags = [];\n      }\n      return prev;\n    })\n  }\n\n  findNode(id) {\n    return data.find(node => {\n      return node.id === id && this.checkConditions(node);\n    });\n  }\n\n  checkConditions(node) {\n    if(node.conditions) {\n      return !node.conditions.some(condition =>  {\n        if(!this.checkFlag(condition)) {\n          return true;\n        }\n        return false;\n      })\n    }\n    return true;\n  }\n\n  setFlag(flag) {\n    if(!this.checkFlag(flag)) {\n      const nextFlags = this.state.flags.concat([flag]);\n      this.setState(prev => {\n        prev.flags = nextFlags;\n        return prev;\n      });\n    }\n  }\n\n  removeFlag(flag) {\n    var copy = [...this.state.flags]; // make a separate copy of the array\n    var index = copy.indexOf(flag);\n    copy.splice(index, 1);\n    this.setState(prev => {\n      prev.flags = copy;\n      return prev;\n    });\n  }\n\n  checkFlag(flag) {\n    return this.state.flags.find(f => {return f === flag}) != null;\n  }\n\n  continue() {\n    if(this.state.node.next) {\n      this.setNode(this.state.node.next);\n    }\n    else {\n      console.error(\"Next index not found!\");\n    }\n  }\n\n  render() {\n    return (\n      <main>\n        <h2>Labirynt RPG</h2>\n        <StoryText text={this.state.node.text} />\n        <Options options={this.state.node.options} onContinue={this.continue} onNext={this.setNode} onSetFlag={this.setFlag} onRemoveFlag={this.removeFlag} checkFlag={this.checkFlag}></Options>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}